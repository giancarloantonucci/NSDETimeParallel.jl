var documenterSearchIndex = {"docs":
[{"location":"#TimeParallel.jl","page":"Home","title":"TimeParallel.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation of TimeParallel.jl, a Julia package implementing time-parallel methods.","category":"page"},{"location":"#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Depth = 3","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All exported types and functions are considered part of the public API and thus documented in this manual.","category":"page"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ErrorCheck\nTimeParallelSolver\nTimeParallelIterate\nTimeParallelSolution","category":"page"},{"location":"#TimeParallel.TimeParallelSolver","page":"Home","title":"TimeParallel.TimeParallelSolver","text":"An abstract type for time-parallel solvers.\n\n\n\n\n\n","category":"type"},{"location":"#TimeParallel.TimeParallelSolution","page":"Home","title":"TimeParallel.TimeParallelSolution","text":"TimeParallelSolution <: InitialValueSolution\n\nA composite type for the solution of an InitialValueProblem obtained with a TimeParallelSolver.\n\nConstructors\n\nTimeParallelSolution(problem, solver)\n\nArguments\n\nproblem : initial value problem, e.g. an InitialValueProblem.\nsolver :: TimeParallelSolver.\n\nFunctions\n\ngetindex : get iterate.\nlastindex : last index.\nlength : number of iterates.\nsetindex! : set iterate.\nshow : shows name and contents.\nsummary : shows name.\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"solve\nsolve!\ncoarseguess!","category":"page"},{"location":"#NSDEBase.solve","page":"Home","title":"NSDEBase.solve","text":"solve(problem, solver::TimeParallelSolver; kwargs...) :: TimeParallelSolution\n\nreturns the TimeParallelSolution of a problem, e.g. an InitialValueProblem.\n\n\n\n\n\n","category":"function"},{"location":"#NSDEBase.solve!","page":"Home","title":"NSDEBase.solve!","text":"solve!(solution::TimeParallelSolution, problem, solver::TimeParallelSolver; kwargs...) :: TimeParallelSolution\n\nreturns the TimeParallelSolution of a problem, e.g. an InitialValueProblem.\n\n\n\n\n\n","category":"function"},{"location":"#Solvers","page":"Home","title":"Solvers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Parareal","category":"page"},{"location":"#TimeParallel.Parareal","page":"Home","title":"TimeParallel.Parareal","text":"Parareal <: TimeParallelSolver\n\nA composite type for the parareal algorithm.\n\nConstructors\n\nParareal(ℱ, 𝒢; P = 10, K = P, φ = ErrorCheck(; 𝜑 = 𝜑₁, ϵ = 1e-12))\nParareal(ℱ, 𝒢; P = 10, K = P, 𝜑 = 𝜑₁, ϵ = 1e-12)\n\nArguments\n\nℱ :: Union{Function, InitialValueSolver} : fine solver.\n𝒢 :: Union{Function, InitialValueSolver} : coarse solver.\nP :: Integer : number of time chunks.\nK :: Integer : maximum number of iterations.\n𝜑 :: Function : error control function.\nϵ :: Real : tolerance.\n\nFunctions\n\nshow : shows name and contents.\nsummary : shows name.\n\n\n\n\n\n","category":"type"},{"location":"#Utilities","page":"Home","title":"Utilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"getchunks","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
